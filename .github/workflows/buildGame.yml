name: Build project

on:
  push:
    branches:
      - master
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - master
      - main

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versionSave.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # - iOS # Build an iOS player
          # - StandaloneWindows # Build a Windows standalone
          - StandaloneWindows64 # Build a Windows 64-bit standalone
          # - StandaloneLinux64 # Build a Linux 64-bit standalone
          # - Android # Build an Android .apk standalone app
          - WebGL # WebGL
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Restore platform specific cache
        if: matrix.targetPlatform == 'WebGL' || matrix.targetPlatform == 'Android' || matrix.targetPlatform == 'StandaloneWindows64'
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - name: Restore fallback cache
        if: matrix.targetPlatform != 'WebGL' && matrix.targetPlatform != 'Android' && matrix.targetPlatform != 'StandaloneWindows64'
        uses: actions/cache/restore@v4
        with:
          path: Library
          key: Library-StandaloneWindows64
          restore-keys: Library-WebGL
            Library-

      - name: Free disk space
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true # ~ 8.7 GiB in 5s
          dotnet: true # ~ 1.6 GiB in 1s
          haskell: true # ~ 5.2 GiB in 1s
          large-packages: false # ~ 4,7 GiB in 100s
          docker-images: true # ~ 3.2 GiB in 1s
          swap-storage: false # ~ 4.0 GiB in 1s

      - uses: game-ci/unity-builder@v4
        id: myBuildStep
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: ${{ github.event.repository.name }}
          versioning: Semantic
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Get disk space usage
        run: df -ah /

      - name: Remove DoNotShip folder
        run: |
          sudo find ./build/${{ matrix.targetPlatform }} -maxdepth 1 -type d -name "*DoNotShip*" -exec rm -rf {} +
          sudo find ./build/${{ matrix.targetPlatform }} -maxdepth 1 -type d -name "*ButDontShipItWithYourGame*" -exec rm -rf {} +

      - name: Write version into package.json for badges to work
        if: matrix.targetPlatform == 'WebGL'
        run: echo '{ "version":"${{ steps.myBuildStep.outputs.buildVersion }}" }' | sudo tee ./build/WebGL/${{ github.event.repository.name }}/package.json

      - name: Save version for next job
        id: versionSave
        run: echo "version=${{ steps.myBuildStep.outputs.buildVersion }}" >> "$GITHUB_OUTPUT"

      - name: Deploy to GitHub Pages
        if: matrix.targetPlatform == 'WebGL'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build/WebGL/${{ github.event.repository.name }}
          commit-message: Deploy
          single-commit: true

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  createRelease:
    name: Create GitHub Release
    needs: buildForAllSupportedPlatforms
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - uses: actions/create-release@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.buildForAllSupportedPlatforms.outputs.version}}
          release_name: Release ${{needs.buildForAllSupportedPlatforms.outputs.version}}
          body: This is an automated release that contains all builds.
          draft: false
          prerelease: false

      - name: Upload release variants
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in ./artifacts/; do
            if [ -f "$file" ]; then
                zip_file="${file}.zip"
                echo "Zipping $file to $zip_file..."
                zip -j "$zip_file" "$file"
                echo "Uploading $zip_file..."
                gh release upload "${{needs.buildForAllSupportedPlatforms.outputs.version}}" "$zip_file" --clobber
            fi
          done
